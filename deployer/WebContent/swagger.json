{
  "swagger" : "2.0",
  "info" : {
    "description" : "XML-based RESTful API for remote access to the DP2-NFV system",
    "version" : "1.0.0",
    "title" : "NfvDeployer API",
    "contact" : {
      "email" : "marco.micera+dp2@gmail.com"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/marcomicera/NFVDeployer/1.0.0",
  "tags" : [ {
    "name" : "catalog",
    "description" : "Getting to know all supported network function types"
  }, {
    "name" : "hosts",
    "description" : "Informations regarding physical IN hosts"
  }, {
    "name" : "channels",
    "description" : "Informations regarding physical IN channels, connecting IN hosts"
  }, {
    "name" : "nffgs",
    "description" : "NF-FGs management calls"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/catalog" : {
      "get" : {
        "tags" : [ "catalog" ],
        "summary" : "retrieves the entire catalog of functional types",
        "description" : "Retrieves a set containing all Virtual Network Function (VNF) type objects",
        "operationId" : "getCatalog",
        "produces" : [ "application/xml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CatalogType"
            }
          }
        }
      }
    },
    "/hosts" : {
      "get" : {
        "tags" : [ "hosts" ],
        "summary" : "retrieves all physical hosts in the DP2-NFV system",
        "description" : "Retrieves a set containing all physical IN host objects in the DP2-NFV system",
        "operationId" : "getHosts",
        "produces" : [ "application/xml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HostsType"
            }
          }
        }
      }
    },
    "/hosts/{host_id}" : {
      "get" : {
        "tags" : [ "hosts" ],
        "summary" : "retrieves a single host object",
        "description" : "Retrieves a single host object having the ID specified in the resource path",
        "operationId" : "getHost",
        "produces" : [ "application/xml" ],
        "parameters" : [ {
          "name" : "host_id",
          "in" : "path",
          "description" : "The desired host's ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/HostType"
            }
          },
          "404" : {
            "description" : "(Host) Not found"
          }
        }
      }
    },
    "/channels" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "retrievs all physical channels",
        "description" : "Retrieves a set containing all physical channels connecting physical IN hosts",
        "operationId" : "getChannels",
        "produces" : [ "application/xml" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ChannelsType"
            }
          }
        }
      }
    },
    "/channels/{source_host_id}/{destination_host_id}" : {
      "get" : {
        "tags" : [ "channels" ],
        "summary" : "retrieves a channel between two specified hosts",
        "description" : "Retrieves a single physical channel given two physical hosts specified in the resource path",
        "operationId" : "getChannel",
        "produces" : [ "application/xml" ],
        "parameters" : [ {
          "name" : "source_host_id",
          "in" : "path",
          "description" : "The source host from which the channel starts",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "destination_host_id",
          "in" : "path",
          "description" : "The destination host in which the channel ends",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ChannelType"
            }
          },
          "404" : {
            "description" : "(Channel) Not found"
          }
        }
      }
    },
    "/nffgs" : {
      "get" : {
        "tags" : [ "nffgs" ],
        "summary" : "retrieves all NF-FGs",
        "description" : "Retrieves all NF-FGs requested by end-users",
        "operationId" : "getNffgs",
        "consumes" : [ "text/plain" ],
        "produces" : [ "application/xml" ],
        "parameters" : [ {
          "name" : "since",
          "in" : "query",
          "description" : "the deploy date and time since when we are considering NF-FGs. A null value means that all NF-FGs are considered.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/NffgsType"
            }
          },
          "400" : {
            "description" : "Bad request. Invalid date format."
          }
        }
      },
      "post" : {
        "tags" : [ "nffgs" ],
        "summary" : "deploys a NF-FG",
        "description" : "Deploys a new NF-FG into the system (when a new NF-FG is deployed, its nodes are allocated onto the IN hosts; if it is not possible to allocate all the NF-FG nodes, deployment fails, and nothing is added). If deployment is successful, deploy time is set to the current time.",
        "operationId" : "deployNffg",
        "consumes" : [ "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "nffg",
          "description" : "NF-FG to be inserted",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NffgType"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Nffg added successfully"
          },
          "400" : {
            "description" : "Bad request. The XML NF-FG object contained in the HTTP body was not valid."
          },
          "500" : {
            "description" : "Internal server error: it was not possible to create the specified NF-FG."
          }
        }
      }
    },
    "/nffgs/{nffg_id}" : {
      "get" : {
        "tags" : [ "nffgs" ],
        "summary" : "retrieves a single NF-FG object",
        "description" : "Retrieves all info about the NF-FG specified in the resource path",
        "operationId" : "getNffg",
        "produces" : [ "application/xml" ],
        "parameters" : [ {
          "name" : "nffg_id",
          "in" : "path",
          "description" : "The desired NF-FG's ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/NffgType"
            }
          },
          "404" : {
            "description" : "(NF-FG) Not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "nffgs" ],
        "summary" : "undeploys a NF-FG",
        "description" : "Undeploy an NF-FG (when an NF-FG is undeployed, its allocation relationships are removed).",
        "operationId" : "undeployNffg",
        "parameters" : [ {
          "name" : "nffg_id",
          "in" : "path",
          "description" : "The NF-FG's ID to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK (NF-FG deleted)"
          },
          "404" : {
            "description" : "(NF-FG) Not found"
          }
        }
      }
    },
    "/nffgs/{nffg_id}/links" : {
      "post" : {
        "tags" : [ "nffgs" ],
        "summary" : "adds a single link to the NF-FG",
        "description" : "Adds a single link in an already deployed NF-FG (the client must be able to specify what should happen if the link is already present, i.e. whether the link information should be overwritten or an error should be returned).",
        "operationId" : "addLink",
        "consumes" : [ "text/boolean", "application/xml" ],
        "parameters" : [ {
          "name" : "nffg_id",
          "in" : "path",
          "description" : "The NF-FG's ID on which the link should be added.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "overwrite",
          "in" : "query",
          "description" : "If the link is already present, it specifies whether the link information should be overwritten or an error should be returned.",
          "required" : true,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "link",
          "description" : "Link to be inserted",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/LinkType"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Link added successfully"
          },
          "400" : {
            "description" : "Bad request. The XML link object contained in the HTTP body was not valid."
          },
          "403" : {
            "description" : "Forbidden (when overwrite = false, hence the link has not been overwritten)"
          },
          "404" : {
            "description" : "(NF-FG) Not found"
          }
        }
      }
    },
    "/nffgs/{nffg_id}/links/{link_id}" : {
      "delete" : {
        "tags" : [ "nffgs" ],
        "summary" : "removes a single link",
        "description" : "Removes a single link in an already deployed NF-FG",
        "operationId" : "deleteLink",
        "parameters" : [ {
          "name" : "nffg_id",
          "in" : "path",
          "description" : "The NF-FG's ID from which the link has to be deleted",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "link_id",
          "in" : "path",
          "description" : "The link's ID to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK (link deleted)"
          },
          "404" : {
            "description" : "(NF-FG or link) Not found"
          }
        }
      }
    },
    "/nffgs/{nffg_id}/nodes" : {
      "get" : {
        "tags" : [ "nffgs" ],
        "summary" : "retrieves all nodes from an NF-FG",
        "description" : "Retrieves all node objects from an existing NF-FG",
        "operationId" : "getNodes",
        "produces" : [ "application/xml" ],
        "parameters" : [ {
          "name" : "nffg_id",
          "in" : "path",
          "description" : "The NF-FG's ID of which nodes should be obtained.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/NodesType"
            }
          },
          "404" : {
            "description" : "(NF-FG) Not found"
          }
        }
      },
      "post" : {
        "tags" : [ "nffgs" ],
        "summary" : "adds a single node to the NF-FG",
        "description" : "Adds single node in an already deployed NF-FG (it is added without links and it is also allocated on a host; if allocation is not possible, the addition of the node fails and nothing is added).",
        "operationId" : "addNode",
        "consumes" : [ "application/xml" ],
        "parameters" : [ {
          "name" : "nffg_id",
          "in" : "path",
          "description" : "The NF-FG's ID on which the node should be added.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "node",
          "description" : "Node to be inserted",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/NodeType"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Node added successfully"
          },
          "400" : {
            "description" : "Bad request. The XML node object contained in the HTTP body was not valid."
          },
          "403" : {
            "description" : "Forbidden (allocation constraints not satisfied)"
          },
          "404" : {
            "description" : "(NF-FG) Not found"
          }
        }
      }
    },
    "/nffgs/{nffg_id}/nodes/{node_id}" : {
      "get" : {
        "tags" : [ "nffgs" ],
        "summary" : "retrieves a single node object",
        "description" : "Retrieves a single node object having specified the NF-FG ID in which the node belongs to and its ID in the resource path",
        "operationId" : "getNode",
        "produces" : [ "application/xml" ],
        "parameters" : [ {
          "name" : "nffg_id",
          "in" : "path",
          "description" : "The NF-FG's ID of which the node belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "node_id",
          "in" : "path",
          "description" : "The desired node's ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/NodeType"
            }
          },
          "404" : {
            "description" : "(NF-FG or node) Not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "nffgs" ],
        "summary" : "removes a single node",
        "description" : "Removes a single node in an already deployed NF-FG (removal must be possible only if the node has no incoming links and no outgoing links; removing the node also removes its allocation).",
        "operationId" : "deleteNode",
        "parameters" : [ {
          "name" : "nffg_id",
          "in" : "path",
          "description" : "The NF-FG's ID from which the node has to be deleted",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "node_id",
          "in" : "path",
          "description" : "The node's ID to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK (node deleted)"
          },
          "403" : {
            "description" : "Forbidden (node is connected in some way)"
          },
          "404" : {
            "description" : "(NF-FG or node) Not found"
          }
        }
      }
    },
    "/nffgs/{nffg_id}/nodes/{node_id}/reachableEntities" : {
      "get" : {
        "tags" : [ "nffgs" ],
        "summary" : "get reachable node/hosts from this ndoe",
        "description" : "Get all nodes and hosts (with a given label) reachable from this node via one or more given relationships",
        "operationId" : "getReachableNodes",
        "produces" : [ "application/xml" ],
        "parameters" : [ {
          "name" : "nffg_id",
          "in" : "path",
          "description" : "The NF-FG's ID of which the node belongs to",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "node_id",
          "in" : "path",
          "description" : "The node's ID of which reachability information must be retrieved",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "relationshipTypes",
          "in" : "query",
          "description" : "List [ “a ‘|’-separated list of relationship types” ]",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nodeLabel",
          "in" : "query",
          "description" : "List [ “the label of the nodes to be returned” ]",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ReachableEntitiesType"
            }
          },
          "400" : {
            "description" : "Bad request. Invalid parameters."
          },
          "404" : {
            "description" : "(NF-FG or node) Not found"
          },
          "500" : {
            "description" : "Internal server error"
          }
        }
      }
    }
  },
  "definitions" : {
    "CatalogType" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/VNFType"
      }
    },
    "VNFType" : {
      "type" : "object",
      "required" : [ "functionalType", "id", "requiredMemory", "requiredStorage" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "WEBSERVERt",
          "xml" : {
            "attribute" : true
          }
        },
        "functionalType" : {
          "type" : "string",
          "example" : "WEB_SERVER",
          "xml" : {
            "attribute" : true
          },
          "enum" : [ "CACHE", "DPI", "FW", "MAIL_CLIENT", "MAIL_SERVER", "NAT", "SPAM", "VPN", "WEB_CLIENT", "WEB_SERVER" ]
        },
        "requiredMemory" : {
          "type" : "integer",
          "example" : 60,
          "xml" : {
            "attribute" : true
          }
        },
        "requiredStorage" : {
          "type" : "integer",
          "example" : 7400,
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "VNF"
      }
    },
    "HostsType" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/HostType"
      }
    },
    "HostType" : {
      "type" : "object",
      "required" : [ "id", "maxVNFs" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "H5",
          "xml" : {
            "attribute" : true
          }
        },
        "availableMemory" : {
          "type" : "integer",
          "example" : 5200,
          "xml" : {
            "attribute" : true
          }
        },
        "availableStorage" : {
          "type" : "integer",
          "example" : 65000,
          "xml" : {
            "attribute" : true
          }
        },
        "maxVNFs" : {
          "type" : "integer",
          "example" : 7,
          "xml" : {
            "attribute" : true
          }
        },
        "nodes" : {
          "type" : "array",
          "xml" : {
            "wrapped" : false
          },
          "items" : {
            "$ref" : "#/definitions/NodeRefType"
          }
        }
      },
      "xml" : {
        "name" : "host"
      }
    },
    "NodeRefType" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "WEBSERVERt2Nffg2",
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "node",
        "wrapped" : false
      }
    },
    "ChannelsType" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/ChannelType"
      }
    },
    "ChannelType" : {
      "type" : "object",
      "required" : [ "host1", "host2" ],
      "properties" : {
        "host1" : {
          "type" : "string",
          "example" : "H3",
          "xml" : {
            "attribute" : true
          }
        },
        "host2" : {
          "type" : "string",
          "example" : "H5",
          "xml" : {
            "attribute" : true
          }
        },
        "averageThroughput" : {
          "type" : "number",
          "example" : 21.31,
          "xml" : {
            "attribute" : true
          }
        },
        "averageLatency" : {
          "type" : "integer",
          "example" : 56,
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "channel"
      }
    },
    "NffgsType" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/NffgType"
      }
    },
    "NffgType" : {
      "type" : "object",
      "required" : [ "deployTime", "id", "nodes" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "Nffg2",
          "xml" : {
            "attribute" : true
          }
        },
        "deployTime" : {
          "type" : "string",
          "example" : "H5",
          "xml" : {
            "attribute" : false
          }
        },
        "nodes" : {
          "$ref" : "#/definitions/NodesType"
        }
      },
      "xml" : {
        "name" : "nffg"
      }
    },
    "NodesType" : {
      "type" : "array",
      "items" : {
        "$ref" : "#/definitions/NodeType"
      }
    },
    "NodeType" : {
      "type" : "object",
      "required" : [ "functionalType", "id", "links" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "WEBSERVERt4Nffg2",
          "xml" : {
            "attribute" : true
          }
        },
        "functionalType" : {
          "type" : "string",
          "example" : "DPIa",
          "xml" : {
            "attribute" : true
          }
        },
        "host" : {
          "type" : "string",
          "example" : "H7",
          "xml" : {
            "attribute" : true
          }
        },
        "links" : {
          "type" : "array",
          "xml" : {
            "wrapped" : false
          },
          "items" : {
            "$ref" : "#/definitions/LinkType"
          }
        }
      },
      "xml" : {
        "name" : "node"
      }
    },
    "LinkType" : {
      "type" : "object",
      "required" : [ "destinationNode", "id", "sourceNode" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "example" : "Link12",
          "xml" : {
            "attribute" : true
          }
        },
        "sourceNode" : {
          "type" : "string",
          "example" : "MAILSERVERt3Nffg2",
          "xml" : {
            "attribute" : true
          }
        },
        "destinationNode" : {
          "type" : "string",
          "example" : "SPAMb5Nffg2",
          "xml" : {
            "attribute" : true
          }
        },
        "minimumThroughput" : {
          "type" : "number",
          "example" : 1.24,
          "xml" : {
            "attribute" : true
          }
        },
        "maximumLatency" : {
          "type" : "integer",
          "example" : 0,
          "xml" : {
            "attribute" : true
          }
        }
      },
      "xml" : {
        "name" : "link"
      }
    },
    "ReachableEntitiesType" : {
      "type" : "object",
      "properties" : {
        "nodes" : {
          "type" : "array",
          "xml" : {
            "wrapped" : false
          },
          "items" : {
            "$ref" : "#/definitions/NodeType"
          }
        },
        "hosts" : {
          "type" : "array",
          "xml" : {
            "wrapped" : false
          },
          "items" : {
            "$ref" : "#/definitions/HostType"
          }
        }
      },
      "xml" : {
        "name" : "entities",
        "wrapped" : true
      }
    }
  }
}